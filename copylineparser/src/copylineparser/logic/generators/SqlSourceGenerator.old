/*
 * Created on 13.01.2005
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
package copylineparser.logic.generators;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;

import copylineparser.Copyline;
import copylineparser.logic.model.cobol.AlphanumericFieldType;
import copylineparser.logic.model.cobol.Field;
import copylineparser.logic.model.cobol.FieldType;
import copylineparser.logic.model.cobol.FieldValue;
import copylineparser.logic.model.cobol.FieldValueRange;
import copylineparser.logic.model.cobol.NumericFieldType;
import copylineparser.logic.model.cobol.SimpleFieldValue;
import copylineparser.logic.model.sql.AlphanumericSqlType;
import copylineparser.logic.model.sql.NumericSqlType;
import copylineparser.logic.model.sql.SqlColumnDefinition;
import copylineparser.logic.model.sql.SqlForeignKeyConstraint;
import copylineparser.logic.model.sql.SqlTableDefinition;
import copylineparser.logic.model.sql.SqlType;

/**
 * @author 010627
 * 
 * TODO To change the template for this generated type comment go to Window -
 * Preferences - Java - Code Style - Code Templates
 */
public class SqlSourceGenerator extends SourceGenerator
{
    private Hashtable<Field, SqlTableDefinition> tableDefinitions = new Hashtable<Field, SqlTableDefinition>();

    private Set<SqlForeignKeyConstraint> foreingKeyConstraints = new HashSet<SqlForeignKeyConstraint>();

    private SqlTableDefinition currentTableDef;

    private int tableGenLimitStepNumber;

    private boolean generateForeignKeys;

    public static String convertToSqlName(String cobolFieldname)
    {
        return cobolFieldname.replace('-', '_').toUpperCase();
    }

    public SqlSourceGenerator()
    {
        this(88, false);
    }

    public SqlSourceGenerator(int tableGenLimitStepNumber)
    {
        this(tableGenLimitStepNumber, false);
    }

    public SqlSourceGenerator(int tableGenLimitStepNumber,
            boolean generateForeignKeys)
    {
        super();
        this.tableGenLimitStepNumber = tableGenLimitStepNumber;
        this.generateForeignKeys = generateForeignKeys;
    }

    private void fetchElementaryFields(Field field, List<Field> storage)
    {
        if (field.isFiller() || field.isRedefinition())
        {
            return;
        }
        if (field.isGroup() & !field.isSwitchGroup())
        {
            for (Field kid : field)
            {
                fetchElementaryFields(kid, storage);
            }
        }
        else
        {
            storage.add(field);
        }
    }

    public String generateInsertStatements(Collection<Copyline> copylines,
            Field copylineRootField)
    {
        SqlTableDefinition copylineTabDef = new SqlTableDefinition(
                convertToSqlName(copylineRootField.getName()));

        List<Field> elementaryFields = new ArrayList<Field>();
        fetchElementaryFields(copylineRootField, elementaryFields);

        Collections.sort(elementaryFields, new Comparator<Field>()
        {
            public int compare(Field f1, Field f2)
            {
                return f1.getName().compareToIgnoreCase(f2.getName());
            }

        });

        Hashtable<Field, SqlType> fieldToSqlTypeTable = new Hashtable<Field, SqlType>();
        for (Field elemField : elementaryFields)
        {
            SqlColumnDefinition col = this.getSqlRepresentation(elemField);

            if (elemField.hasDefaultValue())
            {
                FieldValue firstValue = elemField.defaultValues().iterator()
                        .next();
                if (firstValue instanceof SimpleFieldValue)
                {
                    SimpleFieldValue simpleFirstValue = (SimpleFieldValue) firstValue;
                    col.setDefaultValue(col.getType().formatValue(
                            simpleFirstValue.getContent()));
                }
            }

            // an Tabelle binden
            copylineTabDef.addColumn(col);
            // mapping erstellen
            fieldToSqlTypeTable.put(elemField, col.getType());
        }

        StringBuffer tmp = new StringBuffer();
        tmp.append("INSERT INTO ");
        tmp.append(copylineTabDef.getName());
        tmp.append("(");
        tmp.append(copylineTabDef.generateSeparatedColumnNames(","));
        tmp.append(")");
        tmp.append(" VALUES (");

        String stmtBeginning = tmp.toString();
        String stmtEnding = ");\n";

        StringBuffer stmt = new StringBuffer();

        for (Copyline copyline : copylines)
        {
            stmt.append(stmtBeginning);
            copylineRootField.setContent(copyline.getContent());
            Iterator<Field> fieldIt = elementaryFields.iterator();
            while (fieldIt.hasNext())
            {
                Field f = fieldIt.next();
                SqlType type = fieldToSqlTypeTable.get(f);
                stmt.append(type.formatValue(f.getContent(false)));
                if (fieldIt.hasNext())
                    stmt.append(",");
            }

            stmt.append(stmtEnding);
        }

        return stmt.toString();
    }

    /*
     * alte Version
     * 
     * public String generateInsertStatements(Collection <Copyline> copylines,
     * Field copylineRootField) { this.tableDefinitions.clear();
     * this.tableGenLimitStepNumber = 1;
     * 
     * this.handle(copylineRootField); SqlTableDefinition copylineTabDef =
     * this.tableDefinitions .get(copylineRootField);
     * 
     * StringBuffer tmp = new StringBuffer(); tmp.append("INSERT INTO ");
     * tmp.append(copylineTabDef.getName()); tmp.append("(");
     * tmp.append(copylineTabDef.generateSeparatedColumnNames(","));
     * tmp.append(")"); tmp.append(" VALUES (");
     * 
     * String stmtBeginning = tmp.toString(); String stmtEnding = ");\n";
     * 
     * StringBuffer stmt = new StringBuffer(); // TODO: SQLTypes und
     * format-Methode benutzen // Vorlauf: // 1. Gleiche Reihenfolge für Columns
     * und Values: Felder sortieren SortedSet <Field> rootSubFields =
     * copylineRootField .getSubFieldsSortByName(); Iterator <Field> fieldIt =
     * rootSubFields.iterator(); // 2. Redefinitionen entfernen while
     * (fieldIt.hasNext()) { Field f = fieldIt.next(); if (f.isRedefinition())
     * fieldIt.remove(); } // 3. Arrays für Mapping (CobolField ->
     * SqlColumnType) aufbauen Field[] fields = new Field[rootSubFields.size()];
     * fields = rootSubFields.toArray(fields); SqlType[] columnTypes = new
     * SqlType[copylineTabDef.getColumnCount()]; Iterator <SqlColumnDefinition>
     * columnIt = copylineTabDef.iterator(); for (int i = 0; columnIt.hasNext();
     * i++) { columnTypes[i] = columnIt.next().getType(); } // Jetzt geht's los
     * for (Copyline copyline : copylines) { stmt.append(stmtBeginning);
     * copylineRootField.setContent(copyline.getContent()); // der Content für
     * die Felder steht auch im Array (Referenzen!) for (int i = 0; i <
     * fields.length; i++) { stmt.append(columnTypes[i].formatValue(fields[i]
     * .getContent(true))); if (i < fields.length) stmt.append(","); } //
     * fieldIt = rootSubFields.iterator(); // Field child = null; // while
     * (fieldIt.hasNext()) // { // child = fieldIt.next(); // // // TODO:
     * Hochkommata bei Alphanumeric ergänzen //
     * stmt.append(child.getContent(true)); // if (fieldIt.hasNext()) //
     * stmt.append(","); // }
     * 
     * stmt.append(stmtEnding); }
     * 
     * return stmt.toString(); }
     */

    public SortedSet<SqlTableDefinition> getTableDefinitions()
    {
        return new TreeSet<SqlTableDefinition>(this.tableDefinitions.values());
    }

    /*
     * (non-Javadoc)
     * 
     * @see copylineparser.logic.generators.SourceGenerator#generateSource(copylineparser.logic.model.cobol.Field)
     */
    public String generateSource(Field field)
    {
        this.tableDefinitions.clear();
        this.currentTableDef = null;

        this.handle(field);

        this.buf = new StringBuffer();

        for (SqlTableDefinition tableDef : this.tableDefinitions.values())
        {
            buf.append(tableDef.toString());
            buf.append("\n\n");
        }
        for (SqlForeignKeyConstraint fkey : this.foreingKeyConstraints)
        {
            buf.append(fkey.toStringStandalone());
            buf.append("\n\n");
        }

        // TODO: Besser neue Klasse TorqueGenerator (evtl. extends SqlGenerator
        // or has one)
        buf
                .append("************************** Torque XML ****************************");
        buf
                .append("\n<?xml version='1.0' encoding='ISO-8859-1' standalone='no'?>\n");
        for (SqlTableDefinition tableDef : this.tableDefinitions.values())
        {
            buf.append(tableDef.toStringXML());
            buf.append("\n\n");
        }
        return this.buf.toString();
    }

    /*
     * (non-Javadoc)
     * 
     * @see copylineparser.logic.generators.SourceGenerator#handle(copylineparser.logic.model.cobol.Field)
     */
    protected void handle(Field field)
    {
        if (field.isRedefinition())
        {
            return;
        }

        if ((field.isGroup() & (!field.isSwitchGroup()))
                & (field.getStepNumber() <= this.tableGenLimitStepNumber))
        {
            SqlTableDefinition tabDef = new SqlTableDefinition(
                    convertToSqlName(field.getName()));
            if (this.generateForeignKeys)
            {
                SqlColumnDefinition pkey = new SqlColumnDefinition("ID",
                        new NumericSqlType(8, 0));
                pkey.setPrimaryKey(true);
                tabDef.addColumn(pkey);

                if (this.currentTableDef != null)
                {
                    SqlColumnDefinition fkSourceColumn = new SqlColumnDefinition(
                            this.currentTableDef.getName() + "_ID",
                            new NumericSqlType(8, 0));
                    tabDef.addColumn(fkSourceColumn);

                    SqlForeignKeyConstraint fk = new SqlForeignKeyConstraint(
                            tabDef, fkSourceColumn, this.currentTableDef,
                            this.currentTableDef.getColumnByName("ID"));
                    this.foreingKeyConstraints.add(fk);
                }
            }
            this.currentTableDef = tabDef;
            this.tableDefinitions.put(field, this.currentTableDef);

            for (Field child : field)
            {
                handle(child);
            }

        }
        else
        {
            if (this.currentTableDef != null)
            {

                SqlColumnDefinition col = this.getSqlRepresentation(field);

                if (field.hasDefaultValue())
                {
                    FieldValue firstValue = field.defaultValues().iterator()
                            .next();
                    if (firstValue instanceof SimpleFieldValue)
                    {
                        SimpleFieldValue simpleFirstValue = (SimpleFieldValue) firstValue;
                        col.setDefaultValue(col.getType().formatValue(
                                simpleFirstValue.getContent()));
                    }
                }

                // an Tabelle binden
                this.currentTableDef.addColumn(col);
            }
        }

    }

    public SqlColumnDefinition getSqlRepresentation(Field field)
    {
        FieldType cobType = field.getType();
        if (cobType == null & field.isGroup())
        {
            cobType = new AlphanumericFieldType();
        }

        SqlType sqlType = null;
        if (cobType.isNumericType())
        {
            NumericFieldType numType = (NumericFieldType) cobType;
            sqlType = new NumericSqlType(field.length()
                    - numType.getPostCommaLength(), numType
                    .getPostCommaLength());
        }
        else
        {
            sqlType = new AlphanumericSqlType(field.length());
        }

        return new SqlColumnDefinition(convertToSqlName(field.getName()),
                sqlType);
    }

    /*
     * (non-Javadoc)
     * 
     * @see copylineparser.logic.generators.SourceGenerator#handle(copylineparser.logic.model.cobol.AlphanumericFieldType,
     *      int)
     */

    protected void handle(AlphanumericFieldType type, int fieldLength)
    {
        // TODO Auto-generated method stub

    }

    /*
     * (non-Javadoc)
     * 
     * @see copylineparser.logic.generators.SourceGenerator#handle(copylineparser.logic.model.cobol.NumericFieldType,
     *      int)
     */
    protected void handle(NumericFieldType type, int fieldLength)
    {
        // TODO Auto-generated method stub

    }

    /*
     * (non-Javadoc)
     * 
     * @see copylineparser.logic.generators.SourceGenerator#handle(copylineparser.logic.model.cobol.SimpleFieldValue,
     *      copylineparser.logic.model.cobol.FieldType)
     */
    protected void handle(SimpleFieldValue value, FieldType type)
    {
        // TODO Auto-generated method stub

    }

    /*
     * (non-Javadoc)
     * 
     * @see copylineparser.logic.generators.SourceGenerator#handle(copylineparser.logic.model.cobol.FieldValueRange,
     *      copylineparser.logic.model.cobol.FieldType)
     */
    protected void handle(FieldValueRange range, FieldType type)
    {
        // TODO Auto-generated method stub

    }

}
