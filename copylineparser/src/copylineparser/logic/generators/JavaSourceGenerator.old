/*
 * Created on 05.01.2005
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
package copylineparser.logic.generators;

import java.util.Hashtable;
import java.util.Iterator;
import java.util.SortedSet;
import java.util.TreeSet;

import copylineparser.logic.model.cobol.AlphanumericFieldType;
import copylineparser.logic.model.cobol.Field;
import copylineparser.logic.model.cobol.FieldType;
import copylineparser.logic.model.cobol.FieldValue;
import copylineparser.logic.model.cobol.FieldValueRange;
import copylineparser.logic.model.cobol.NumericFieldType;
import copylineparser.logic.model.cobol.SimpleFieldValue;
import copylineparser.logic.model.java.JavaAttributeDefinition;
import copylineparser.logic.model.java.JavaClassDefinition;
import copylineparser.logic.model.java.JavaSwitchClassDefinition;

/**
 * @author 010627
 * 
 */
public class JavaSourceGenerator extends SourceGenerator
{

    private Hashtable<Field, JavaClassDefinition> classDefinitions = new Hashtable<Field, JavaClassDefinition>();

    private JavaClassDefinition currentClassDef;

    public static String generateClassname(String fieldname)
    {
        String firstLetter = fieldname.substring(0, 1).toUpperCase();
        return firstLetter
                + convertToJavaVarName(fieldname.substring(1), false);
    }

    /*
     * Macht aus Verbindung mit '-' die JavaKonvention der GROSS-Schreibung
     */
    public static String convertToJavaVarName(String cobolFieldname,
            boolean constant)
    {
        if (constant)
        {
            return cobolFieldname.replace('-', '_').toUpperCase();
        }
        else
        {
            StringBuffer buf = new StringBuffer();
            char[] letters = cobolFieldname.toLowerCase().toCharArray();
            for (int i = 0; i < letters.length; i++)
            {
                if (letters[i] == '-')
                {
                    try
                    {
                        // überspringen, nächstes Zeichen GROSS schreiben
                        // und anhängen
                        buf.append(Character.toUpperCase(letters[++i]));
                    }
                    catch (ArrayIndexOutOfBoundsException e)
                    {
                    }
                }
                else
                {
                    buf.append(letters[i]);
                }
            }
            return buf.toString();
        }
    }

    public static String getJavaRepresentation(FieldType type)
    {
        if (type instanceof AlphanumericFieldType)
        {
            return "String";
        }
        if (type instanceof NumericFieldType)
        {
            NumericFieldType numType = (NumericFieldType) type;
            if (numType.isDecimal())
            {
                return "double";
            }
            else
            {
                return "long";
            }
        }
        else
        {
            return "Object";
        }
    }

    public JavaSourceGenerator()
    {
        super();
    }

    /*
     * Erzeugt temporär einen DummyParent wenn field.parent == null
     */
    public synchronized String generateSource(Field field)
    {
        this.classDefinitions.clear();
        this.currentClassDef = null;
        
        Field dummyParent = new Field(field.getStepNumber() - 1, "DUMMY");

        // if (!field.hasParent())
        // {
        // field.setParent(dummyParent);
        // this.currentClassDef = new JavaClassDefinition("DUMMY");
        // this.handle(field);
        // field.setParent(null);
        // }
        // else
        // {
        // this.currentClassDef = new JavaClassDefinition(
        // generateClassname(field.getName()));
        // this.handle(field);
        // }

        Field originParent = field.getParent();
        field.setParent(dummyParent);
        this.currentClassDef = new JavaClassDefinition("DUMMY");
        this.handle(field);
        field.setParent(originParent);

        // DummyParent-ClassDef löschen (egal ob verwendet oder nicht)
        classDefinitions.remove(dummyParent);
        StringBuffer allClassDefinitions = new StringBuffer();
        for (JavaClassDefinition classDef : this.classDefinitions.values())
        {
            allClassDefinitions.append(classDef.toString());
            allClassDefinitions
                    .append("\n\n/************************************************/\n\n");
        }
        return allClassDefinitions.toString();
    }

    public SortedSet<JavaClassDefinition> getClassDefinitions()
    {
        return new TreeSet<JavaClassDefinition>(this.classDefinitions.values());
    }

    /*
     * Achtung: field muss Parent haben! Es darf also nicht mit Root direkt
     * angefangen werden! Ebenso darf keine Reflexion vorkommen: field !=
     * field.parent
     */
    protected void handle(Field field)
    {
        /*
         * TODO : Redefinition -> Klassenvererbung, aber nicht einfach field
         * extends RedefinedField, sondern neue Abstrakte Oberklasse erzeugen!
         */

        /*
         * TODO: Namenseindeutigkeit bei mehreren Redefinitionen!
         */

        if (field.isGroup())
        {

            String className = generateClassname(field.getName());
            String superClassName = "";
            if (field.isRedefinition())
            {
                superClassName = generateClassname(field.getRedefinedField()
                        .getName());
                // Klassenname erweitern für Namenseindeutig bei FILLERN
                className = "RedfinitionOf" + superClassName;
            }

            // Erzeuge Assoziation auf sich selbst bei Parent
            // es wird in Buffer von Parent geschrieben

            JavaAttributeDefinition selfAssociation = new JavaAttributeDefinition(
                    "my" + className, className);
            selfAssociation.setArray(field.isArray());

            // Eintrag der Assoziation bei Parent
            this.currentClassDef.addAttribute(selfAssociation);

            // Definition von Parent speichern
            this.classDefinitions.put(field.getParent(), this.currentClassDef);

            // Neue Definition für sich selbst erzeugen
            if (field.isSwitchGroup())
            {
                this.currentClassDef = new JavaSwitchClassDefinition(className,
                        new JavaAttributeDefinition("switchValue",
                                getJavaRepresentation(field.getType())));
            }
            else
            {
                this.currentClassDef = new JavaClassDefinition(className);
            }

            for (Field child : field)
            {
                this.handle(child);
            }
            // Eigene Klassendefinition abgeschlossen

            // sich selbst speichern
            classDefinitions.put(field, this.currentClassDef);

            // Definition von Parent zurückholen
            this.currentClassDef = classDefinitions.get(field.getParent());
        }
        else
        {
            JavaAttributeDefinition classMember = new JavaAttributeDefinition(
                    convertToJavaVarName(field.getName(), field.isSwitch()),
                    getJavaRepresentation(field.getType()));

            classMember.setConstant(field.isSwitch());

            this.buf = new StringBuffer();

            if (field.getDefaultValueCount() > 1)
            {
                classMember.setArray(true);
                buf.append("{");

                Iterator<FieldValue> valIt = field.defaultValues().iterator();
                while (valIt.hasNext())
                {
                    FieldValue val = valIt.next();
                    this.handle(val, field.getType());
                    if (valIt.hasNext())
                    {
                        buf.append(", ");
                    }
                }
                buf.append("}");
            }
            else if (field.getDefaultValueCount() == 1)
            {
                FieldValue val = field.defaultValues().iterator().next();
                classMember.setArray(val instanceof FieldValueRange);
                this.handle(val, field.getType());
            }
            classMember.setValue(buf.toString());
            this.currentClassDef.addAttribute(classMember);
        }

    }

    /*
     * (non-Javadoc)
     * 
     * @see copylineparser.logic.generation.SourceGenerationhandleor#handle(copylineparser.logic.model.AlphanumericFieldType)
     */
    protected void handle(AlphanumericFieldType type, int fieldLength)
    {
        buf.append("String");
    }

    /*
     * (non-Javadoc)
     * 
     * @see copylineparser.logic.generation.SourceGenerationhandleor#handle(copylineparser.logic.model.NumericFieldType)
     */
    protected void handle(NumericFieldType type, int fieldLength)
    {
        if (type.isDecimal())
        {
            buf.append("double");
        }
        else
        {
            buf.append("long");
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see copylineparser.logic.generation.SourceGenerationhandleor#handle(copylineparser.logic.model.SimpleFieldValue)
     */
    protected void handle(SimpleFieldValue value, FieldType type)
    {
        String content = value.getContent();
        if (content.equalsIgnoreCase("ZERO")
                || content.equalsIgnoreCase("ZEROES"))
        {
            buf.append("0");
            return;
        }
        else if (content.equalsIgnoreCase("SPACE")
                || content.equalsIgnoreCase("SPACES"))
        {
            buf.append("\" \"");
            return;
        }
        try
        {
            if (type.isNumericType())
            {
                buf.append(value.getContent());
            }
            else
            {
                buf.append("\"");
                buf.append(value.getContent());
                buf.append("\"");
            }
        }
        catch (NullPointerException e)
        {
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see copylineparser.logic.generation.SourceGenerationhandleor#handle(copylineparser.logic.model.FieldValueRange)
     */
    protected void handle(FieldValueRange range, FieldType typ)
    {
        long start = parseNumber(range.getStart());
        long end = parseNumber(range.getEnd());
        buf.append("{ ");
        for (long i = start; i < end; i++)
        {
            buf.append(String.valueOf(i));
            buf.append(", ");
        }
        // end extra, weil danach kein Komma folgt
        buf.append(end);
        buf.append(" }");
    }

    private long parseNumber(SimpleFieldValue val)
    {
        String content = val.getContent();
        if (content.equalsIgnoreCase("ZERO")
                || content.equalsIgnoreCase("ZEROES"))
        {
            return 0;
        }
        else
        {
            return Long.parseLong(content);
        }
    }

}
