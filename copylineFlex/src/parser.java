//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Jul 27 17:28:46 CEST 2005
//----------------------------------------------------

/**
 * CUP v0.10k generated parser.
 * 
 * @version Wed Jul 27 17:28:46 CEST 2005
 */
public class parser extends java_cup.runtime.lr_parser
{

	/** Default constructor. */
	public parser()
	{
		super();
	}

	/** Constructor which sets the default scanner. */
	public parser(java_cup.runtime.Scanner s)
	{
		super(s);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\041\000\002\002\004\000\002\003\003\000\002\013"
			+ "\004\000\002\013\004\000\002\013\003\000\002\013\003"
			+ "\000\002\004\004\000\002\005\005\000\002\017\004\000"
			+ "\002\017\005\000\002\006\004\000\002\006\005\000\002"
			+ "\006\005\000\002\006\004\000\002\007\004\000\002\007"
			+ "\004\000\002\010\004\000\002\010\005\000\002\011\004"
			+ "\000\002\012\003\000\002\012\003\000\002\012\002\000"
			+ "\002\016\004\000\002\016\004\000\002\016\004\000\002"
			+ "\016\004\000\002\014\004\000\002\014\003\000\002\015"
			+ "\005\000\002\015\004\000\002\015\003\000\002\020\005"
			+ "\000\002\020\006" });

	/** Access to production table. */
	public short[][] production_table()
	{
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\057\000\004\004\007\001\002\000\006\002\ufffd\004"
			+ "\007\001\002\000\004\002\060\001\002\000\004\002\000"
			+ "\001\002\000\004\005\057\001\002\000\006\012\055\021"
			+ "\054\001\002\000\006\002\ufffc\004\007\001\002\000\014"
			+ "\012\uffec\013\017\015\021\017\020\020\013\001\002\000"
			+ "\006\004\052\006\051\001\002\000\010\012\ufff7\013\017"
			+ "\021\ufff7\001\002\000\004\012\047\001\002\000\006\012"
			+ "\ufff4\021\ufff4\001\002\000\004\004\045\001\002\000\004"
			+ "\005\044\001\002\000\010\004\030\007\031\010\027\001"
			+ "\002\000\006\012\uffee\020\013\001\002\000\004\012\uffed"
			+ "\001\002\000\006\012\ufff5\021\ufff5\001\002\000\006\012"
			+ "\uffeb\021\uffeb\001\002\000\006\012\uffe9\021\uffe9\001\002"
			+ "\000\006\012\uffea\021\uffea\001\002\000\014\004\036\011"
			+ "\034\012\uffe3\016\037\021\uffe3\001\002\000\010\007\031"
			+ "\012\uffe6\021\uffe6\001\002\000\006\012\uffe8\021\uffe8\001"
			+ "\002\000\006\012\uffe7\021\uffe7\001\002\000\004\004\036"
			+ "\001\002\000\006\012\uffe4\021\uffe4\001\002\000\012\004"
			+ "\036\011\034\012\uffe3\021\uffe3\001\002\000\004\004\040"
			+ "\001\002\000\010\004\041\012\uffe2\021\uffe2\001\002\000"
			+ "\004\016\037\001\002\000\006\012\uffe1\021\uffe1\001\002"
			+ "\000\006\012\uffe5\021\uffe5\001\002\000\006\012\uffef\020"
			+ "\uffef\001\002\000\010\012\ufff1\014\046\021\ufff1\001\002"
			+ "\000\006\012\ufff0\021\ufff0\001\002\000\006\002\ufffa\004"
			+ "\ufffa\001\002\000\006\012\ufff6\021\ufff6\001\002\000\010"
			+ "\012\ufff3\013\ufff3\021\ufff3\001\002\000\010\012\ufff2\013"
			+ "\ufff2\021\ufff2\001\002\000\004\002\uffff\001\002\000\004"
			+ "\012\056\001\002\000\006\002\ufff9\004\ufff9\001\002\000"
			+ "\006\002\ufff8\004\ufff8\001\002\000\014\012\ufffb\013\ufffb"
			+ "\015\ufffb\017\ufffb\020\ufffb\001\002\000\004\002\001\001"
			+ "\002\000\004\002\ufffe\001\002" });

	/** Access to parse-action table. */
	public short[][] action_table()
	{
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\057\000\016\003\004\004\011\005\010\006\007\013"
			+ "\005\017\003\001\001\000\014\004\011\005\010\006\007"
			+ "\013\060\017\003\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\014\004\011"
			+ "\005\010\006\007\013\052\017\003\001\001\000\014\007"
			+ "\013\010\022\011\021\012\014\016\015\001\001\000\002"
			+ "\001\001\000\004\010\047\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\010"
			+ "\014\024\015\025\020\031\001\001\000\004\007\023\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\004\015\034\001"
			+ "\001\000\004\014\032\001\001\000\002\001\001\000\002"
			+ "\001\001\000\004\015\042\001\001\000\002\001\001\000"
			+ "\004\015\034\001\001\000\002\001\001\000\004\020\041"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table()
	{
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$parser$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions()
	{
		action_obj = new CUP$parser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num,
			java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
			throws java.lang.Exception
	{
		/* call code in generated class */
		return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	public int start_state()
	{
		return 0;
	}

	/** Indicates start production. */
	public int start_production()
	{
		return 0;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym()
	{
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym()
	{
		return 1;
	}

	public void report_error(String message, Object info)
	{
		StringBuffer m = new StringBuffer("Error ");

		if (info instanceof java_cup.runtime.Symbol)
			m.append("(" + info.toString() + ")");

		m.append(" : " + message);

		System.out.println(m);
	}

	public void report_fatal_error(String message, Object info)
	{
		report_error(message, info);
		throw new RuntimeException("Fatal Syntax Error");
	}

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$parser$actions
{
	private final parser parser;

	/** Constructor */
	CUP$parser$actions(parser parser)
	{
		this.parser = parser;
	}

	/** Method with the actual generated action code. */
	public final java_cup.runtime.Symbol CUP$parser$do_action(
			int CUP$parser$act_num,
			java_cup.runtime.lr_parser CUP$parser$parser,
			java.util.Stack CUP$parser$stack, int CUP$parser$top)
			throws java.lang.Exception
	{
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$parser$result;

		/* select the action based on the action number */
		switch (CUP$parser$act_num)
		{
		/* . . . . . . . . . . . . . . . . . . . . */
		case 32: // number_ranges ::= NUMBER THROUGH NUMBER number_ranges
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(
					14/* number_ranges */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 3)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 31: // number_ranges ::= NUMBER THROUGH NUMBER
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(
					14/* number_ranges */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 30: // numbers ::= NUMBER
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(11/* numbers */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 29: // numbers ::= NUMBER numbers
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(11/* numbers */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 28: // numbers ::= NUMBER COMMA numbers
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(11/* numbers */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 27: // strings ::= STRING_LITERAL
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(10/* strings */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 26: // strings ::= STRING_LITERAL strings
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(10/* strings */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 25: // value_structure ::= VALUE number_ranges
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(
					12/* value_structure */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 24: // value_structure ::= VALUE numbers
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(
					12/* value_structure */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 23: // value_structure ::= VALUE BOOLEAN_LITERAL
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(
					12/* value_structure */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 22: // value_structure ::= VALUE strings
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(
					12/* value_structure */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 21: // redef_or_occ ::=
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(8/* redef_or_occ */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 20: // redef_or_occ ::= occurence_structure
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(8/* redef_or_occ */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 19: // redef_or_occ ::= redefinition_structure
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(8/* redef_or_occ */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 18: // redefinition_structure ::= REDEFINES IDENTIFIER
		{
			Object RESULT = null;
			int nameOfRedefinedFieldleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int nameOfRedefinedFieldright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			java.lang.String nameOfRedefinedField = (java.lang.String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			CUP$parser$result = new java_cup.runtime.Symbol(
					7/* redefinition_structure */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 17: // occurence_structure ::= OCCURS NUMBER TIMES
		{
			Object RESULT = null;
			int occurenceleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int occurenceright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			java.lang.Integer occurence = (java.lang.Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;

			FieldBuilder.getInstance().setFieldOccurence(occurence);
			RESULT = occurence;

			CUP$parser$result = new java_cup.runtime.Symbol(
					6/* occurence_structure */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 16: // occurence_structure ::= OCCURS NUMBER
		{
			Object RESULT = null;
			int occurenceleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int occurenceright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			java.lang.Integer occurence = (java.lang.Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			FieldBuilder.getInstance().setFieldOccurence(occurence);
			RESULT = occurence;

			CUP$parser$result = new java_cup.runtime.Symbol(
					6/* occurence_structure */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 15: // fieldtype ::= PICTURE NUMBER
		{
			Object RESULT = null;
			int singleNineleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int singleNineright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			java.lang.Integer singleNine = (java.lang.Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			FieldBuilder.getInstance().setFieldTypedefinition("9");
			RESULT = "9";

			CUP$parser$result = new java_cup.runtime.Symbol(5/* fieldtype */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 14: // fieldtype ::= PICTURE TYPEDEFINITION
		{
			Object RESULT = null;
			int typeDefStringleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int typeDefStringright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			java.lang.String typeDefString = (java.lang.String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			FieldBuilder.getInstance().setFieldTypedefinition(typeDefString);
			RESULT = typeDefString;

			CUP$parser$result = new java_cup.runtime.Symbol(5/* fieldtype */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 13: // simplefield ::= abstractfield value_structure
		{
			Object RESULT = null;

			RESULT = FieldBuilder.getInstance().buildSwitchField();

			CUP$parser$result = new java_cup.runtime.Symbol(4/* simplefield */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 12: // simplefield ::= abstractfield redefinition_structure
					// fieldtype
		{
			Object RESULT = null;

			RESULT = FieldBuilder.getInstance().buildSimpleField();

			CUP$parser$result = new java_cup.runtime.Symbol(4/* simplefield */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 11: // simplefield ::= abstractfield fieldtype
					// occurence_structure
		{
			Object RESULT = null;

			RESULT = FieldBuilder.getInstance().buildSimpleField();

			CUP$parser$result = new java_cup.runtime.Symbol(4/* simplefield */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 10: // simplefield ::= abstractfield fieldtype
		{
			Object RESULT = null;

			RESULT = FieldBuilder.getInstance().buildSimpleField();

			CUP$parser$result = new java_cup.runtime.Symbol(4/* simplefield */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 9: // packedfield ::= simplefield PACKED_DECIMAL DOT
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(13/* packedfield */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 8: // packedfield ::= simplefield DOT
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(13/* packedfield */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 7: // groupfield ::= abstractfield redef_or_occ DOT
		{
			Object RESULT = null;

			RESULT = FieldBuilder.getInstance().buildGroupField();

			CUP$parser$result = new java_cup.runtime.Symbol(3/* groupfield */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 2)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 6: // abstractfield ::= NUMBER IDENTIFIER
		{
			Object RESULT = null;
			int stepnumberleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int stepnumberright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			java.lang.Integer stepnumber = (java.lang.Integer) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int fieldnameleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).left;
			int fieldnameright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).right;
			java.lang.String fieldname = (java.lang.String) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 0)).value;

			FieldBuilder fb = FieldBuilder.getInstance();
			fb.clearBuildParameters();
			fb.setFieldStepNumber(stepnumber);
			fb.setFieldName(fieldname);

			CUP$parser$result = new java_cup.runtime.Symbol(
					2/* abstractfield */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 5: // mixed_fields ::= groupfield
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(9/* mixed_fields */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 4: // mixed_fields ::= packedfield
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(9/* mixed_fields */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 3: // mixed_fields ::= packedfield mixed_fields
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(9/* mixed_fields */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 2: // mixed_fields ::= groupfield mixed_fields
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(9/* mixed_fields */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 1: // copyline ::= mixed_fields
		{
			Object RESULT = null;

			CUP$parser$result = new java_cup.runtime.Symbol(1/* copyline */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			return CUP$parser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 0: // $START ::= copyline EOF
		{
			Object RESULT = null;
			int start_valleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int start_valright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = start_val;
			CUP$parser$result = new java_cup.runtime.Symbol(0/* $START */,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 1)).left,
					((java_cup.runtime.Symbol) CUP$parser$stack
							.elementAt(CUP$parser$top - 0)).right, RESULT);
		}
			/* ACCEPT */
			CUP$parser$parser.done_parsing();
			return CUP$parser$result;

		/* . . . . . . */
		default:
			throw new Exception(
					"Invalid action number found in internal parse table");

		}
	}
}
