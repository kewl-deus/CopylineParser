/* The following code was generated by JFlex 1.4.1 on 27.07.05 15:58 */

/*
 * This class is for scanning adabas meta-structure
 */

import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * 1.4.1 on 27.07.05 15:58 from the specification file
 * <tt>C:/Dokumente und Einstellungen/010627/Lokale Dateien/eclipse/copylineFlex/src/copyline.flex</tt>
 */
class CopylineScanner implements sym, java_cup.runtime.Scanner
{

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int STRING = 1;

	public static final int YYINITIAL = 0;

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = { 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 2, 0,
			3, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 3, 0,
			43, 0, 4, 0, 0, 49, 14, 15, 21, 18, 20, 6, 42, 13, 12, 22, 22, 40,
			22, 22, 22, 22, 22, 11, 0, 10, 0, 0, 0, 0, 0, 8, 9, 25, 35, 31, 36,
			34, 33, 29, 4, 41, 32, 30, 37, 24, 38, 4, 27, 17, 28, 26, 19, 4, 7,
			39, 16, 0, 23, 0, 0, 4, 0, 4, 44, 4, 4, 4, 47, 4, 4, 4, 4, 4, 4, 4,
			46, 4, 4, 4, 48, 4, 45, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 5 };

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\1\1\1\0\1\2\2\3\1\4\1\2\1\5\1\4"
			+ "\1\5\1\1\1\5\2\4\1\6\1\3\6\4\1\7"
			+ "\1\10\1\11\2\12\1\2\1\13\2\5\1\4\1\5"
			+ "\1\0\1\5\1\4\2\5\1\0\3\5\1\4\1\5"
			+ "\13\4\1\14\1\15\1\16\1\17\1\20\1\21\1\22"
			+ "\1\23\1\24\2\0\1\4\1\0\13\4\1\25\1\4"
			+ "\1\5\1\26\3\4\1\27\1\4\1\30\2\4\1\31"
			+ "\4\4\1\0\1\4\1\32\1\33\3\4\1\34\1\4"
			+ "\1\35\2\4\1\3\1\5\1\26\1\32\1\33\1\36"
			+ "\1\27\4\4\1\5\2\4\1\25\2\4\1\37\5\4";

	private static int[] zzUnpackAction()
	{
		int[] result = new int[131];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\62\0\144\0\226\0\144\0\310\0\372\0\u012c"
			+ "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\144\0\u028a"
			+ "\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\144\0\144"
			+ "\0\u03e8\0\u041a\0\144\0\u044c\0\144\0\u047e\0\u04b0\0\u04e2"
			+ "\0\u0514\0\u0546\0\u0578\0\u05aa\0\144\0\u05dc\0\u060e\0\u0640"
			+ "\0\310\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e"
			+ "\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\144"
			+ "\0\144\0\144\0\144\0\144\0\144\0\144\0\144\0\144"
			+ "\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c"
			+ "\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c"
			+ "\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac"
			+ "\0\310\0\u0dde\0\u0e10\0\310\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8"
			+ "\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\310"
			+ "\0\u1068\0\310\0\u109a\0\u10cc\0\310\0\u10fe\0\310\0\310"
			+ "\0\310\0\310\0\310\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8"
			+ "\0\u122a\0\u125c\0\310\0\u128e\0\u12c0\0\310\0\u12f2\0\u1324"
			+ "\0\u1356\0\u1388\0\u13ba";

	private static int[] zzUnpackRowMap()
	{
		int[] result = new int[131];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l)
		{
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\3\1\4\2\5\1\6\1\3\1\7\2\10\1\11"
			+ "\1\3\1\12\1\13\3\3\1\14\1\15\1\7\1\16"
			+ "\1\17\1\20\1\13\1\3\1\21\1\22\1\6\1\23"
			+ "\1\24\7\6\1\25\1\6\1\26\1\6\1\13\1\6"
			+ "\1\27\1\30\5\6\1\3\1\31\1\32\1\33\24\31"
			+ "\1\34\23\31\1\35\6\31\64\0\1\5\63\0\6\6"
			+ "\1\0\2\6\3\0\2\6\1\0\1\6\2\0\1\6"
			+ "\1\0\22\6\2\0\5\6\14\0\1\36\4\0\1\36"
			+ "\45\0\3\6\2\37\1\40\1\0\2\37\1\41\1\42"
			+ "\1\0\2\6\1\0\1\6\2\0\1\6\1\0\22\6"
			+ "\2\0\5\6\5\0\6\6\1\43\2\6\3\0\2\6"
			+ "\1\0\1\6\2\0\1\6\1\0\5\6\1\44\14\6"
			+ "\2\0\5\6\7\0\1\45\4\0\1\46\1\13\1\0"
			+ "\1\47\1\0\1\50\1\0\1\45\2\50\1\0\1\13"
			+ "\21\0\1\13\24\0\2\13\11\0\1\13\21\0\1\13"
			+ "\15\0\2\6\1\51\3\6\1\0\1\52\1\6\1\0"
			+ "\1\47\1\0\1\52\1\6\1\45\1\52\1\50\1\0"
			+ "\1\6\1\0\7\6\1\53\12\6\2\0\5\6\5\0"
			+ "\6\6\1\0\1\54\1\6\3\0\1\54\1\6\1\0"
			+ "\1\6\2\0\1\6\1\0\16\6\1\55\3\6\2\0"
			+ "\5\6\5\0\4\6\1\56\1\6\1\0\2\6\3\0"
			+ "\2\6\1\0\1\6\2\0\1\6\1\0\22\6\2\0"
			+ "\5\6\1\0\1\20\1\4\1\5\57\20\4\0\6\6"
			+ "\1\0\2\6\3\0\2\6\1\0\1\6\2\0\1\6"
			+ "\1\0\1\6\1\57\20\6\2\0\5\6\5\0\6\6"
			+ "\1\0\2\6\3\0\2\6\1\0\1\6\2\0\1\6"
			+ "\1\0\1\60\21\6\2\0\5\6\5\0\6\6\1\0"
			+ "\2\6\3\0\2\6\1\0\1\6\2\0\1\6\1\0"
			+ "\7\6\1\61\12\6\2\0\5\6\5\0\6\6\1\0"
			+ "\2\6\3\0\2\6\1\0\1\6\2\0\1\6\1\0"
			+ "\3\6\1\62\1\6\1\63\3\6\1\64\10\6\2\0"
			+ "\5\6\5\0\4\6\1\65\1\6\1\0\2\6\3\0"
			+ "\2\6\1\0\1\6\2\0\1\6\1\0\22\6\2\0"
			+ "\5\6\5\0\4\6\1\66\1\6\1\0\2\6\3\0"
			+ "\2\6\1\0\1\6\2\0\1\6\1\0\5\6\1\67"
			+ "\14\6\2\0\5\6\1\0\1\31\2\0\24\31\1\0"
			+ "\23\31\1\0\6\31\2\0\1\33\57\0\2\70\1\0"
			+ "\24\70\1\71\23\70\1\72\1\73\1\74\1\75\1\76"
			+ "\1\77\1\100\6\0\1\45\4\0\1\50\2\0\1\47"
			+ "\1\0\1\50\1\0\1\45\2\50\41\0\3\6\2\37"
			+ "\1\40\1\0\2\37\1\41\2\0\2\6\1\0\1\6"
			+ "\2\0\1\6\1\0\22\6\2\0\5\6\5\0\6\6"
			+ "\1\41\2\6\3\0\2\6\1\0\1\6\2\0\1\6"
			+ "\1\0\22\6\2\0\5\6\10\0\2\41\1\101\1\0"
			+ "\3\41\57\0\1\102\1\42\11\0\1\102\21\0\1\102"
			+ "\20\0\2\41\1\101\1\0\3\41\1\42\47\0\6\6"
			+ "\1\0\2\6\3\0\2\6\1\0\1\6\2\0\1\6"
			+ "\1\0\15\6\1\103\4\6\2\0\5\6\7\0\1\45"
			+ "\4\0\1\46\1\13\3\0\1\50\1\0\1\45\2\50"
			+ "\1\0\1\13\21\0\1\13\24\0\1\104\1\47\11\0"
			+ "\1\104\21\0\1\104\17\0\1\45\4\0\1\50\4\0"
			+ "\1\50\1\0\1\45\2\50\41\0\2\6\1\51\3\6"
			+ "\1\0\1\52\1\6\3\0\1\52\1\6\1\45\1\52"
			+ "\1\50\1\0\1\6\1\0\22\6\2\0\5\6\5\0"
			+ "\6\6\1\0\2\6\3\0\2\6\1\0\1\6\2\0"
			+ "\1\6\1\0\3\6\1\105\16\6\2\0\5\6\5\0"
			+ "\2\6\1\51\3\6\1\0\1\52\1\6\1\0\1\47"
			+ "\1\0\1\52\1\6\1\45\1\52\1\50\1\0\1\6"
			+ "\1\0\22\6\2\0\5\6\5\0\4\6\1\106\1\6"
			+ "\1\0\2\6\3\0\2\6\1\0\1\6\2\0\1\6"
			+ "\1\0\22\6\2\0\5\6\5\0\6\6\1\0\2\6"
			+ "\3\0\2\6\1\0\1\6\2\0\1\6\1\0\10\6"
			+ "\1\107\11\6\2\0\5\6\5\0\6\6\1\0\2\6"
			+ "\3\0\2\6\1\0\1\6\2\0\1\6\1\0\1\6"
			+ "\1\110\20\6\2\0\5\6\5\0\6\6\1\0\2\6"
			+ "\3\0\2\6\1\0\1\6\2\0\1\6\1\0\6\6"
			+ "\1\111\13\6\2\0\5\6\5\0\6\6\1\0\2\6"
			+ "\3\0\2\6\1\0\1\6\2\0\1\6\1\0\13\6"
			+ "\1\112\6\6\2\0\5\6\5\0\6\6\1\0\2\6"
			+ "\3\0\2\6\1\0\1\6\2\0\1\6\1\0\2\6"
			+ "\1\113\17\6\2\0\5\6\5\0\6\6\1\0\2\6"
			+ "\3\0\2\6\1\0\1\6\2\0\1\6\1\0\6\6"
			+ "\1\114\13\6\2\0\5\6\5\0\6\6\1\0\2\6"
			+ "\3\0\2\6\1\0\1\6\2\0\1\6\1\0\3\6"
			+ "\1\115\16\6\2\0\5\6\5\0\6\6\1\0\2\6"
			+ "\3\0\2\6\1\0\1\6\2\0\1\6\1\0\10\6"
			+ "\1\116\11\6\2\0\5\6\5\0\6\6\1\0\2\6"
			+ "\3\0\2\6\1\0\1\6\2\0\1\6\1\0\1\6"
			+ "\1\117\20\6\2\0\5\6\5\0\6\6\1\0\2\6"
			+ "\3\0\2\6\1\0\1\6\2\0\1\6\1\0\1\6"
			+ "\1\120\20\6\2\0\5\6\13\0\1\41\62\0\2\102"
			+ "\2\0\1\45\6\0\1\102\21\0\1\102\15\0\4\6"
			+ "\1\121\1\6\1\0\2\6\3\0\2\6\1\0\1\6"
			+ "\2\0\1\6\1\0\22\6\2\0\5\6\14\0\2\104"
			+ "\2\0\1\122\6\0\1\104\21\0\1\104\15\0\6\6"
			+ "\1\0\2\6\3\0\2\6\1\0\1\6\2\0\1\6"
			+ "\1\0\1\123\21\6\2\0\5\6\5\0\6\6\1\0"
			+ "\2\6\3\0\2\6\1\0\1\6\2\0\1\6\1\0"
			+ "\1\6\1\124\20\6\2\0\5\6\5\0\6\6\1\0"
			+ "\2\6\3\0\2\6\1\0\1\6\2\0\1\6\1\0"
			+ "\2\6\1\125\17\6\2\0\5\6\5\0\6\6\1\0"
			+ "\2\6\3\0\2\6\1\0\1\6\2\0\1\6\1\0"
			+ "\2\6\1\126\17\6\2\0\5\6\5\0\6\6\1\0"
			+ "\2\6\3\0\2\6\1\0\1\6\2\0\1\6\1\0"
			+ "\16\6\1\127\3\6\2\0\5\6\5\0\6\6\1\0"
			+ "\2\6\3\0\2\6\1\0\1\6\2\0\1\6\1\0"
			+ "\7\6\1\130\12\6\2\0\5\6\5\0\6\6\1\0"
			+ "\2\6\3\0\2\6\1\0\1\6\2\0\1\6\1\0"
			+ "\7\6\1\131\12\6\2\0\5\6\5\0\6\6\1\0"
			+ "\2\6\3\0\2\6\1\0\1\6\2\0\1\6\1\0"
			+ "\7\6\1\132\12\6\2\0\5\6\5\0\6\6\1\0"
			+ "\2\6\3\0\2\6\1\0\1\6\2\0\1\6\1\0"
			+ "\1\133\1\6\1\134\17\6\2\0\5\6\5\0\6\6"
			+ "\1\0\2\6\3\0\1\6\1\135\1\0\1\6\2\0"
			+ "\1\6\1\0\22\6\2\0\5\6\5\0\6\6\1\0"
			+ "\2\6\3\0\2\6\1\0\1\6\2\0\1\6\1\0"
			+ "\21\6\1\136\2\0\5\6\5\0\6\6\1\0\2\6"
			+ "\3\0\2\6\1\0\1\6\2\0\1\6\1\0\4\6"
			+ "\1\137\15\6\2\0\5\6\5\0\6\6\1\0\2\6"
			+ "\3\0\2\6\1\0\1\6\2\0\1\6\1\0\3\6"
			+ "\1\140\16\6\2\0\5\6\7\0\1\45\13\0\1\45"
			+ "\1\141\42\0\6\6\1\0\2\6\3\0\2\6\1\0"
			+ "\1\6\2\0\1\6\1\0\7\6\1\142\12\6\2\0"
			+ "\5\6\5\0\6\6\1\0\2\6\3\0\2\6\1\0"
			+ "\1\6\2\0\1\6\1\0\7\6\1\143\12\6\2\0"
			+ "\5\6\5\0\6\6\1\0\2\6\3\0\2\6\1\0"
			+ "\1\6\2\0\1\6\1\0\7\6\1\144\12\6\2\0"
			+ "\5\6\5\0\6\6\1\0\2\6\3\0\2\6\1\0"
			+ "\1\6\2\0\1\6\1\0\3\6\1\145\16\6\2\0"
			+ "\5\6\5\0\2\6\1\146\3\6\1\0\2\6\3\0"
			+ "\2\6\1\0\1\6\2\0\1\6\1\0\22\6\2\0"
			+ "\5\6\5\0\6\6\1\0\2\6\3\0\2\6\1\0"
			+ "\1\6\2\0\1\6\1\0\14\6\1\147\5\6\2\0"
			+ "\5\6\5\0\6\6\1\0\2\6\3\0\1\6\1\150"
			+ "\1\0\1\6\2\0\1\6\1\0\22\6\2\0\5\6"
			+ "\5\0\6\6\1\0\2\6\3\0\2\6\1\0\1\6"
			+ "\2\0\1\6\1\0\2\6\1\151\17\6\2\0\5\6"
			+ "\5\0\6\6\1\0\2\6\3\0\2\6\1\0\1\6"
			+ "\2\0\1\6\1\0\7\6\1\152\12\6\2\0\5\6"
			+ "\5\0\6\6\1\0\2\6\3\0\2\6\1\0\1\6"
			+ "\2\0\1\6\1\0\7\6\1\153\12\6\2\0\5\6"
			+ "\5\0\6\6\1\0\2\6\3\0\2\6\1\0\1\6"
			+ "\2\0\1\6\1\0\2\6\1\154\17\6\2\0\5\6"
			+ "\5\0\6\6\1\0\2\6\3\0\2\6\1\0\1\6"
			+ "\2\0\1\6\1\0\17\6\1\155\2\6\2\0\5\6"
			+ "\14\0\1\156\4\0\1\156\45\0\6\6\1\0\2\6"
			+ "\3\0\1\6\1\157\1\0\1\6\2\0\1\6\1\0"
			+ "\22\6\2\0\5\6\5\0\6\6\1\0\2\6\3\0"
			+ "\1\6\1\160\1\0\1\6\2\0\1\6\1\0\22\6"
			+ "\2\0\5\6\5\0\6\6\1\0\2\6\3\0\1\6"
			+ "\1\161\1\0\1\6\2\0\1\6\1\0\22\6\2\0"
			+ "\5\6\5\0\6\6\1\0\2\6\3\0\1\6\1\162"
			+ "\1\0\1\6\2\0\1\6\1\0\22\6\2\0\5\6"
			+ "\5\0\6\6\1\0\2\6\3\0\2\6\1\0\1\6"
			+ "\2\0\1\6\1\0\20\6\1\163\1\6\2\0\5\6"
			+ "\5\0\6\6\1\0\2\6\3\0\2\6\1\0\1\6"
			+ "\2\0\1\6\1\0\5\6\1\164\14\6\2\0\5\6"
			+ "\5\0\6\6\1\0\2\6\3\0\2\6\1\0\1\6"
			+ "\2\0\1\6\1\0\12\6\1\165\7\6\2\0\5\6"
			+ "\5\0\6\6\1\0\2\6\3\0\2\6\1\0\1\6"
			+ "\2\0\1\6\1\0\13\6\1\166\6\6\2\0\5\6"
			+ "\5\0\6\6\1\0\2\6\3\0\2\6\1\0\1\6"
			+ "\2\0\1\6\1\0\3\6\1\167\16\6\2\0\5\6"
			+ "\14\0\1\170\2\0\1\42\1\0\1\170\2\0\2\170"
			+ "\41\0\6\6\1\0\2\6\3\0\2\6\1\0\1\6"
			+ "\2\0\1\6\1\0\15\6\1\171\4\6\2\0\5\6"
			+ "\5\0\6\6\1\0\2\6\3\0\2\6\1\0\1\6"
			+ "\2\0\1\6\1\0\11\6\1\134\10\6\2\0\5\6"
			+ "\5\0\2\6\1\172\3\6\1\0\2\6\3\0\2\6"
			+ "\1\0\1\6\2\0\1\6\1\0\22\6\2\0\5\6"
			+ "\5\0\6\6\1\0\2\6\3\0\2\6\1\0\1\6"
			+ "\2\0\1\6\1\0\7\6\1\173\12\6\2\0\5\6"
			+ "\14\0\1\170\4\0\1\170\2\0\2\170\41\0\6\6"
			+ "\1\0\2\6\3\0\2\6\1\0\1\6\2\0\1\6"
			+ "\1\0\7\6\1\174\12\6\2\0\5\6\5\0\6\6"
			+ "\1\0\2\6\3\0\2\6\1\0\1\6\2\0\1\6"
			+ "\1\0\13\6\1\175\6\6\2\0\5\6\5\0\6\6"
			+ "\1\0\2\6\3\0\1\6\1\176\1\0\1\6\2\0"
			+ "\1\6\1\0\22\6\2\0\5\6\5\0\6\6\1\0"
			+ "\2\6\3\0\2\6\1\0\1\6\2\0\1\6\1\0"
			+ "\7\6\1\177\12\6\2\0\5\6\5\0\6\6\1\0"
			+ "\2\6\3\0\2\6\1\0\1\6\2\0\1\6\1\0"
			+ "\1\6\1\200\20\6\2\0\5\6\5\0\6\6\1\0"
			+ "\2\6\3\0\2\6\1\0\1\6\2\0\1\6\1\0"
			+ "\5\6\1\201\14\6\2\0\5\6\5\0\6\6\1\0"
			+ "\2\6\3\0\2\6\1\0\1\6\2\0\1\6\1\0"
			+ "\6\6\1\202\13\6\2\0\5\6\5\0\4\6\1\203"
			+ "\1\6\1\0\2\6\3\0\2\6\1\0\1\6\2\0"
			+ "\1\6\1\0\22\6\2\0\5\6\5\0\6\6\1\0"
			+ "\2\6\3\0\2\6\1\0\1\6\2\0\1\6\1\0"
			+ "\10\6\1\163\11\6\2\0\5\6\1\0";

	private static int[] zzUnpackTrans()
	{
		int[] result = new int[5100];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;

	private static final int ZZ_NO_MATCH = 1;

	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
			"Unkown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\1\1\1\0\1\11\1\1\1\11\11\1\1\11\7\1"
			+ "\2\11\2\1\1\11\1\1\1\11\4\1\1\0\2\1"
			+ "\1\11\1\1\1\0\20\1\11\11\2\0\1\1\1\0" + "\34\1\1\0\42\1";

	private static int[] zzUnpackAttribute()
	{
		int[] result = new int[131];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of
	 * the yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the textposition at the last state to be included in yytext */
	private int zzPushbackPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from
	 * input
	 */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the
	 * matched text
	 */
	private int yycolumn;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/* user code: */
	StringBuffer string = new StringBuffer();

	private Symbol symbol(int type)
	{
		return new SymbolWithPosition(type, yyline + 1, yycolumn + 1);
	}

	private Symbol symbol(int type, Object value)
	{
		return new SymbolWithPosition(type, yyline + 1, yycolumn + 1, value);
	}

	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Reader to read input from.
	 */
	CopylineScanner(java.io.Reader in)
	{
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner. There is also java.io.Reader version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Inputstream to read input from.
	 */
	CopylineScanner(java.io.InputStream in)
	{
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Refills the input buffer.
	 * 
	 * @return <code>false</code>, iff there was new input.
	 * 
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException
	{

		/* first: make room (if you can) */
		if (zzStartRead > 0)
		{
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead
					- zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzPushbackPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length)
		{
			/* if not: blow it up */
			char newBuffer[] = new char[zzCurrentPos * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
		}

		/* finally: fill the buffer with new input */
		int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length
				- zzEndRead);

		if (numRead < 0)
		{
			return true;
		}
		else
		{
			zzEndRead += numRead;
			return false;
		}
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException
	{
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */

		if (zzReader != null)
			zzReader.close();
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the
	 * old reader.
	 * 
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>ZZ_INITIAL</tt>.
	 * 
	 * @param reader
	 *            the new input stream
	 */
	public final void yyreset(java.io.Reader reader)
	{
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate()
	{
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 * 
	 * @param newState
	 *            the new lexical state
	 */
	public final void yybegin(int newState)
	{
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext()
	{
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 * 
	 * @param pos
	 *            the position of the character to fetch. A value from 0 to
	 *            yylength()-1.
	 * 
	 * @return the character at position pos
	 */
	public final char yycharat(int pos)
	{
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength()
	{
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 * 
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and
	 * a match-all fallback rule) this method will only be called with things
	 * that "Can't Possibly Happen". If this method is called, something is
	 * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 * 
	 * Usual syntax/scanner level error handling should be done in error
	 * fallback rules.
	 * 
	 * @param errorCode
	 *            the code of the errormessage to display
	 */
	private void zzScanError(int errorCode)
	{
		String message;
		try
		{
			message = ZZ_ERROR_MSG[errorCode];
		}
		catch (ArrayIndexOutOfBoundsException e)
		{
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * 
	 * They will be read again by then next call of the scanning method
	 * 
	 * @param number
	 *            the number of characters to be read again. This number must
	 *            not be greater than yylength()!
	 */
	public void yypushback(int number)
	{
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}

	/**
	 * Contains user EOF-code, which will be executed exactly once, when the end
	 * of file is reached
	 */
	private void zzDoEOF() throws java.io.IOException
	{
		if (!zzEOFDone)
		{
			zzEOFDone = true;
			yyclose();
		}
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 * 
	 * @return the next token
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	public java_cup.runtime.Symbol next_token() throws java.io.IOException
	{
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true)
		{
			zzMarkedPosL = zzMarkedPos;

			boolean zzR = false;
			for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++)
			{
				switch (zzBufferL[zzCurrentPosL])
				{
				case '\u000B':
				case '\u000C':
				case '\u0085':
				case '\u2028':
				case '\u2029':
					yyline++;
					yycolumn = 0;
					zzR = false;
					break;
				case '\r':
					yyline++;
					yycolumn = 0;
					zzR = true;
					break;
				case '\n':
					if (zzR)
						zzR = false;
					else
					{
						yyline++;
						yycolumn = 0;
					}
					break;
				default:
					zzR = false;
					yycolumn++;
				}
			}

			if (zzR)
			{
				// peek one character ahead if it is \n (if we have counted one
				// line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL)
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				else if (zzAtEOF)
					zzPeek = false;
				else
				{
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof)
						zzPeek = false;
					else
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				if (zzPeek)
					yyline--;
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = zzLexicalState;

			zzForAction:
			{
				while (true)
				{

					if (zzCurrentPosL < zzEndReadL)
						zzInput = zzBufferL[zzCurrentPosL++];
					else if (zzAtEOF)
					{
						zzInput = YYEOF;
						break zzForAction;
					}
					else
					{
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof)
						{
							zzInput = YYEOF;
							break zzForAction;
						}
						else
						{
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
						break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1)
					{
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction])
			{
			case 28:
			{
				return symbol(TIMES);
			}
			case 32:
				break;
			case 20:
			{
				string.append('\'');
			}
			case 33:
				break;
			case 1:
			{
				return symbol(NUMBER, new Integer(yytext()));
			}
			case 34:
				break;
			case 25:
			{
				return symbol(THROUGH);
			}
			case 35:
				break;
			case 9:
			{
				string.append(yytext());
			}
			case 36:
				break;
			case 2:
			{
				throw new RuntimeException("Illegal character \"" + yytext()
						+ "\" at line " + yyline + ", column " + yycolumn);
			}
			case 37:
				break;
			case 23:
			{
				return symbol(PACKED_DECIMAL);
			}
			case 38:
				break;
			case 24:
			{
				return symbol(BOOLEAN_LITERAL, new Boolean(true));
			}
			case 39:
				break;
			case 19:
			{
				string.append('\r');
			}
			case 40:
				break;
			case 31:
			{
				return symbol(REDEFINES);
			}
			case 41:
				break;
			case 7:
			{
				return symbol(DOT);
			}
			case 42:
				break;
			case 5:
			{
				return symbol(TYPEDEFINITION, yytext());
			}
			case 43:
				break;
			case 10:
			{
				throw new RuntimeException("Unterminated string at end of line");
			}
			case 44:
				break;
			case 15:
			{
				string.append('\b');
			}
			case 45:
				break;
			case 11:
			{
				yybegin(YYINITIAL);
				return symbol(STRING_LITERAL, string.toString());
			}
			case 46:
				break;
			case 26:
			{
				return symbol(STRING_LITERAL, " ");
			}
			case 47:
				break;
			case 16:
			{
				string.append('\t');
			}
			case 48:
				break;
			case 6:
			{
				return symbol(COMMA);
			}
			case 49:
				break;
			case 4:
			{
				return symbol(IDENTIFIER, yytext());
			}
			case 50:
				break;
			case 12:
			{
				throw new RuntimeException("Illegal escape sequence \""
						+ yytext() + "\"");
			}
			case 51:
				break;
			case 30:
			{
				return symbol(OCCURS);
			}
			case 52:
				break;
			case 13:
			{
				string.append('\\');
			}
			case 53:
				break;
			case 22:
			{
				return symbol(NUMBER, new Integer(0));
			}
			case 54:
				break;
			case 21:
			{
				return symbol(PICTURE);
			}
			case 55:
				break;
			case 8:
			{
				yybegin(STRING);
				string.setLength(0);
			}
			case 56:
				break;
			case 17:
			{
				string.append('\n');
			}
			case 57:
				break;
			case 29:
			{
				return symbol(BOOLEAN_LITERAL, new Boolean(false));
			}
			case 58:
				break;
			case 18:
			{
				string.append('\f');
			}
			case 59:
				break;
			case 27:
			{
				return symbol(VALUE);
			}
			case 60:
				break;
			case 3:
			{ /* ignore */
			}
			case 61:
				break;
			case 14:
			{
				string.append('\"');
			}
			case 62:
				break;
			default:
				if (zzInput == YYEOF && zzStartRead == zzCurrentPos)
				{
					zzAtEOF = true;
					zzDoEOF();
					{
						return symbol(EOF);
					}
				}
				else
				{
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

	/**
	 * Converts an int token code into the name of the token by reflection on
	 * the cup symbol class/interface sym
	 * 
	 * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
	 */
	private String getTokenName(int token)
	{
		try
		{
			java.lang.reflect.Field[] classFields = sym.class.getFields();
			for (int i = 0; i < classFields.length; i++)
			{
				if (classFields[i].getInt(null) == token)
				{
					return classFields[i].getName();
				}
			}
		}
		catch (Exception e)
		{
			e.printStackTrace(System.err);
		}

		return "UNKNOWN TOKEN";
	}

	/**
	 * Same as next_token but also prints the token to standard out for
	 * debugging.
	 * 
	 * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
	 */
	public java_cup.runtime.Symbol debug_next_token()
			throws java.io.IOException
	{
		java_cup.runtime.Symbol s = next_token();
		System.out.println("line:" + (yyline + 1) + " col:" + (yycolumn + 1)
				+ " --" + yytext() + "--" + getTokenName(s.sym) + "--");
		return s;
	}

	/**
	 * Runs the scanner on input files.
	 * 
	 * This main method is the debugging routine for the scanner. It prints
	 * debugging information about each returned token to System.out until the
	 * end of file is reached, or an error occured.
	 * 
	 * @param argv
	 *            the command line, contains the filenames to run the scanner
	 *            on.
	 */
	public static void main(String argv[])
	{
		if (argv.length == 0)
		{
			System.out.println("Usage : java CopylineScanner <inputfile>");
		}
		else
		{
			for (int i = 0; i < argv.length; i++)
			{
				CopylineScanner scanner = null;
				try
				{
					scanner = new CopylineScanner(new java.io.FileReader(
							argv[i]));
					while (!scanner.zzAtEOF)
						scanner.debug_next_token();
				}
				catch (java.io.FileNotFoundException e)
				{
					System.out.println("File not found : \"" + argv[i] + "\"");
				}
				catch (java.io.IOException e)
				{
					System.out.println("IO error scanning file \"" + argv[i]
							+ "\"");
					System.out.println(e);
				}
				catch (Exception e)
				{
					System.out.println("Unexpected exception:");
					e.printStackTrace();
				}
			}
		}
	}

}
